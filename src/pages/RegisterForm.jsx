// pages/ManualEntry.jsx
import React, { useState } from 'react';
import Select from 'react-select';

function ManualEntry() {
  const initialForm = {
    citizen_id: '',
    fullname: '',
    injection_date: '',
    drug_name: '',
    clinic_name: '',
    dose: '',
    position: '',
    signature: '',
  };

  const [form, setForm] = useState(initialForm);
  const [suggestedIds, setSuggestedIds] = useState([]);

  const clinics = [
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏´‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 02",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏´‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡πâ‡∏ß‡∏¢‡πÇ‡∏ó‡∏á ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 03",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ö‡∏≤‡∏á‡∏î‡∏µ ‡∏ö‡πâ‡∏≤‡∏ô‡∏û‡∏£‡∏∏‡∏à‡∏∏‡∏î ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 03",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ö‡∏≤‡∏á‡∏î‡∏µ ‡∏ö‡πâ‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏Å‡πÅ‡∏î‡∏£‡∏Å ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 05",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ö‡∏≤‡∏á‡∏à‡∏±‡∏ç ‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏≤‡∏ß‡∏á ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 02",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ö‡∏≤‡∏á‡∏à‡∏±‡∏ç ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡∏•‡∏≠‡∏á ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 05",
    "‡∏£‡∏û.‡∏™‡∏ï.‡πÄ‡∏Ç‡∏≤‡∏Å‡∏≠‡∏ö ‡∏ö‡πâ‡∏≤‡∏ô‡∏ñ‡∏ô‡∏ô‡πÅ‡∏û‡∏£‡∏Å ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 04",
    "‡∏£‡∏û.‡∏™‡∏ï.‡πÄ‡∏Ç‡∏≤‡∏Å‡∏≠‡∏ö ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏≠‡∏á‡∏õ‡∏£‡∏∑‡∏≠ ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 08",
    "‡∏£‡∏û.‡∏™‡∏ï.‡πÄ‡∏Ç‡∏≤‡∏Ç‡∏≤‡∏ß ‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 07",
    "‡∏£‡∏û.‡∏™‡∏ï.‡πÄ‡∏Ç‡∏≤‡∏õ‡∏π‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏Ç‡∏≤‡∏õ‡∏π‡∏ô ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 02",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏õ‡∏≤‡∏Å‡πÅ‡∏à‡πà‡∏° ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≠‡∏¢ ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 03",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏õ‡∏≤‡∏Å‡∏Ñ‡∏° ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏≠‡∏á‡∏Ç‡∏µ‡πâ‡πÄ‡∏•‡∏µ‡∏¢‡∏î ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 02",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ó‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏° ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏¥‡∏ô‡∏ô‡∏≠‡∏° ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 07",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏•‡∏≥‡∏†‡∏π‡∏£‡∏≤ ‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 01",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ô‡∏≤‡∏ß‡∏á ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏°‡∏á ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 01",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ô‡∏≤‡∏ß‡∏á ‡∏ö‡πâ‡∏≤‡∏ô‡πÇ‡∏û‡∏ò‡∏¥‡πå‡∏£‡∏¥‡∏ô ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 06",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏´‡πâ‡∏ß‡∏¢‡∏ô‡∏≤‡∏á ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡πâ‡∏ß‡∏¢‡∏ô‡∏≤‡∏á ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 02",
    "‡∏£‡∏û.‡∏™‡∏ï.‡πÉ‡∏ô‡πÄ‡∏ï‡∏≤ ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏±‡∏î ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 01",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ó‡∏∏‡πà‡∏á‡∏ï‡πà‡∏≠ ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡πâ‡∏ß‡∏¢‡πÄ‡∏•‡πá‡∏Å ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 07",
    "‡∏£‡∏û.‡∏™‡∏ï.‡∏ß‡∏±‡∏á‡∏®‡∏£‡∏µ ‡∏ö‡πâ‡∏≤‡∏ô‡∏ß‡∏±‡∏á‡∏Å‡∏≥‡πÉ‡∏ï‡πâ ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 02"
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));

    if (name === 'citizen_id') {
      if (value.length >= 4) {
        fetch('http://192.168.1.246/project/backend/suggest_ids.php', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query: value })
        })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              setSuggestedIds(data.ids);
            } else {
              setSuggestedIds([]);
            }
          })
          .catch(() => setSuggestedIds([]));
      } else {
        setSuggestedIds([]);
      }
    }
  };

  const handleSuggestionClick = (id) => {
    setForm(prev => ({ ...prev, citizen_id: id }));
    setSuggestedIds([]);
  };

  const handleCitizenIdBlur = async () => {
    const id = form.citizen_id.trim();
    if (/^\d{13}$/.test(id)) {
      try {
        const baseURL = `${window.location.origin}/project/backend`;

        const res = await fetch(`${baseURL}/fetch_name.php`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(form)
        });
        
        const data = await res.json();
        if (data.success) {
          setForm(prev => ({ ...prev, fullname: data.fullname }));
        } else {
          alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
        }
      } catch (err) {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const baseURL = `${window.location.origin}/project/backend`;

const res = await fetch(`${baseURL}/save.php`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(form)
});

      const data = await res.json();
      alert(data.success ? "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" : "‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      if (!data.success) return;

      const botToken = process.env.REACT_APP_BOT_TOKEN;
      const chatId = process.env.REACT_APP_CHAT_ID;

      const telegramMessage = `
üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏¢‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${form.fullname}
üÜî ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£: ${form.citizen_id}
üíâ ‡∏¢‡∏≤: ${form.drug_name} (${form.dose})
üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏â‡∏µ‡∏î: ${form.position}
üè• ‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢: ${form.clinic_name}
üïí ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${form.injection_date}
‚úçÔ∏è ‡∏ú‡∏π‡πâ‡∏â‡∏µ‡∏î: ${form.signature}
      `;

      const telegramPayload = {
        chat_id: chatId,
        text: telegramMessage,
        parse_mode: 'HTML'
      };

      await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(telegramPayload)
      });

      setForm(initialForm);
      setSuggestedIds([]);
    } catch (err) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
    }
  };

  return (
    <form className="card" onSubmit={handleSubmit}>
      
     

    

      <div className="field" style={{ position: 'relative' }}>
        <label>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô</label>
        <input type="text" name="citizen_id" value={form.citizen_id} onChange={handleChange} onBlur={handleCitizenIdBlur} required autoComplete="off" />
        {suggestedIds.length > 0 && (
          <ul style={{
            position: 'absolute',
            background: '#fff',
            listStyle: 'none',
            padding: '0.5rem',
            margin: 0,
            border: '1px solid #ccc',
            width: '100%',
            zIndex: 10
          }}>
            {suggestedIds.map((id, idx) => (
              <li
                key={idx}
                onClick={() => handleSuggestionClick(id)}
                style={{ padding: '4px', cursor: 'pointer' }}
              >
                {id}
              </li>
            ))}
          </ul>
        )}
      </div>

      <div className="field">
        <label>‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
        <input type="text" name="fullname" value={form.fullname} onChange={handleChange} required />
      </div>

      <div className="field">
        <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏â‡∏µ‡∏î‡∏¢‡∏≤</label>
        <input type="date" name="injection_date" value={form.injection_date} onChange={handleChange} required />
      </div>

      <div className="field">
        <label>‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤</label>
        <input type="text" name="drug_name" value={form.drug_name} onChange={handleChange} required />
      </div>

      <div style={{ display: 'flex', gap: '1rem' }}>
        <div className="field" style={{ flex: 1 }}>
          <label>‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤</label>
          <input type="text" name="dose" value={form.dose} onChange={handleChange} required />
        </div>

        <div className="field" style={{ flex: 1 }}>
          <label>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏â‡∏µ‡∏î</label>
          <input type="text" name="position" value={form.position} onChange={handleChange} required />
        </div>

        <div className="field" style={{ flex: 1 }}>
          <label>‡∏•‡∏≤‡∏¢‡∏°‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏â‡∏µ‡∏î</label>
          <input type="text" name="signature" value={form.signature} onChange={handleChange} required />
        </div>
      </div>

      <div className="field">
        <label>‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢</label>
        <Select
          options={clinics.map(c => ({ label: c, value: c }))}
          onChange={(selected) => setForm(prev => ({ ...prev, clinic_name: selected.value }))}
          placeholder="-- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢ --"
          isSearchable
          value={form.clinic_name ? { label: form.clinic_name, value: form.clinic_name } : null}
        />
      </div>

      <button type="submit">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
    </form>
  );
}

export default ManualEntry;
